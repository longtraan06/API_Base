{"premises": "No professional soccer players play professional basketball.\nAll professional soccer defenders are professional soccer players.\nAll professional centerbacks are professional soccer defenders.\nSome athletes are professional center-backs.\nStephen Curry plays professional basketball.", "premises-FOL": "∀x ((Professional(x) ∧ SoccerPlayer(x)) → ¬Play(x, professionalBasketball)))\n∀x ((Professional(x) ∧ Defender(x)) → (Professional(x) ∧ SoccerPlayer(x)))\n∀x ((Professional(x) ∧ CenterBack(x)) → (Professional(x) ∧ Defender(x))\n∃x (Athlete(x) ∧ Professional(x) ∧ CenterBack(x))\nPlay(stephenCurry, professionalBasketball)", "query": {"NL": "Is it true that Stephen Curry is an athlete.?", "FOL": "Is Athlete(stephenCurry) true?"}}
{"premises": "No professional soccer players play professional basketball.\nAll professional soccer defenders are professional soccer players.\nAll professional centerbacks are professional soccer defenders.\nSome athletes are professional center-backs.\nStephen Curry plays professional basketball.", "premises-FOL": "∀x ((Professional(x) ∧ SoccerPlayer(x)) → ¬Play(x, professionalBasketball)))\n∀x ((Professional(x) ∧ Defender(x)) → (Professional(x) ∧ SoccerPlayer(x)))\n∀x ((Professional(x) ∧ CenterBack(x)) → (Professional(x) ∧ Defender(x))\n∃x (Athlete(x) ∧ Professional(x) ∧ CenterBack(x))\nPlay(stephenCurry, professionalBasketball)", "query": {"NL": "Is it true that Stephen Curry is an athlete and a professional centerback.?", "FOL": "Is Athlete(stephenCurry) ∧ Professional(stephenCurry) ∧ CenterBack(stephenCurry) true?"}}
{"premises": "No professional soccer players play professional basketball.\nAll professional soccer defenders are professional soccer players.\nAll professional centerbacks are professional soccer defenders.\nSome athletes are professional center-backs.\nStephen Curry plays professional basketball.", "premises-FOL": "∀x ((Professional(x) ∧ SoccerPlayer(x)) → ¬Play(x, professionalBasketball)))\n∀x ((Professional(x) ∧ Defender(x)) → (Professional(x) ∧ SoccerPlayer(x)))\n∀x ((Professional(x) ∧ CenterBack(x)) → (Professional(x) ∧ Defender(x))\n∃x (Athlete(x) ∧ Professional(x) ∧ CenterBack(x))\nPlay(stephenCurry, professionalBasketball)", "query": {"NL": "Is it true that If Stephen Curry is a professional centerback, then he is not an athlete.?", "FOL": "Is (Professional(stephenCurry) ∧ CenterBack(stephenCurry)) → ¬Athlete(stephenCurry) true?"}}
{"premises": "If people join student government in high school, then they will have many opportunities to improve their communication skills.\nIf students stay alone in high school, then they will have have many opportunities to improve their communication skills.\nPeople who want to gain leadership skills also join student government in high school.\nIf people are well-adjusted and engaged within their communities, then they are respected by the residents.\nIf people care about creating community, then they are well-adjusted and engaged within their communities.\nIf Tyler does not stay alone in high school, then Tyler has many opportunities to improve their communication skills.", "premises-FOL": "∀x (Join(x, studentGovernment) → ManyOpportunityToImprove(x, communicationSkill)) \n∀x (StayAloneIn(x, highSchool)  → ¬ManyOpportunityToImprove(x, communicationSkill)) \n∀x (WantToLead(x) → JoinIn(x, studentGovernment, highSchool)) \n∀x (WellAdjustedWithin(x, community) ∧ EngagedWithIn(x, community) → RespectedBy(x, resident) ) \n∀x (CareAboutCreating(x, community) → WellAdjustedWithin(x, community) ∧ EngagedWithIn(x, community))\n¬(JoinIn(tyler, studentGovernment, highSchool) ∧ CareAboutCreating(tyler, community)) → ¬ManyOpportunityToImprove(x, communicationSkill) ∧ ¬CareAboutCreating(tyler, community))", "query": {"NL": "Is it true that Tyler joined the student government in high school.?", "FOL": "Is JoinIn(tyler, studentGovernment, highSchool) true?"}}
{"premises": "If people join student government in high school, then they will have many opportunities to improve their communication skills.\nIf students stay alone in high school, then they will have have many opportunities to improve their communication skills.\nPeople who want to gain leadership skills also join student government in high school.\nIf people are well-adjusted and engaged within their communities, then they are respected by the residents.\nIf people care about creating community, then they are well-adjusted and engaged within their communities.\nIf Tyler does not stay alone in high school, then Tyler has many opportunities to improve their communication skills.", "premises-FOL": "∀x (Join(x, studentGovernment) → ManyOpportunityToImprove(x, communicationSkill)) \n∀x (StayAloneIn(x, highSchool)  → ¬ManyOpportunityToImprove(x, communicationSkill)) \n∀x (WantToLead(x) → JoinIn(x, studentGovernment, highSchool)) \n∀x (WellAdjustedWithin(x, community) ∧ EngagedWithIn(x, community) → RespectedBy(x, resident) ) \n∀x (CareAboutCreating(x, community) → WellAdjustedWithin(x, community) ∧ EngagedWithIn(x, community))\n¬(JoinIn(tyler, studentGovernment, highSchool) ∧ CareAboutCreating(tyler, community)) → ¬ManyOpportunityToImprove(x, communicationSkill) ∧ ¬CareAboutCreating(tyler, community))", "query": {"NL": "Is it true that If Tyler either both stays alone in high school and is well-adjusted and engaged in their community, or neither stays alone in high school nor is well-adjusted and engaged in their community, then Tyler either both has many opportunities to improve their communication skills and stays alone in high school or neither has many opportunities to improve their communication skills nor stays alone in high school.?", "FOL": "Is ¬(StayAloneIn(tyler, highSchool) ⊕ (Well-adjustedWithin(x, community) ∧ EngagedWithIn(x, community))) → ¬(ManyOpportunityToImprove(tyler, communicationSkill) ⊕ StayAloneIn(tyler, highSchool)) true?"}}
{"premises": "All runners who ranked in the top 1000 in the Boston Marathon finished the marathon within 3 hours.\nAll runners from the Yale Running Club ranked in the top 1000 in the Boston Marathon.\nAll runners wearing T-shirts with the bulldog logo are from Yale Running Club.\nSome of the runners wearing T-shirts with the bulldog logo are majoring in Computer Science\nTim is a runner and if Tim finishes the Boston Marathon within 3 hours, then he is not both from Yale Running Club and ranked in the top 1000 in the Boston Marathon. \nTim is a runner and if Tim majors in computer science, then he is either wearing a T-shirt with the bulldog logo or is a runner from the Yale Running Club.", "premises-FOL": "∀x (Runner(x) ∧ RankedIn(x, top1000, bostonMarathon) → FinishWithin(x, bostonMarathon, 3Hours))\n∀x (Runner(x) ∧ From(x, yaleRunningClub) → RankedIn(x, top1000, bostonMarathon))\n∀x (Runner(x) ∧ Wear(x, tshirtsWithBulldogLogo) → From(x, yaleRunningClub))\n∃x (Runner(x) ∧ Wear(x, tshirtsWithBulldogLogo) ∧ MajorIn(x, computerScience))\nRunner(tim) ∧ (FinishWithin(x, bostonMarathon, 3Hours) → ¬(From(tim, yaleRunningClub) ∧ RankedIn(tim, top1000, bostonMarathon)))\nRunner(tim) ∧ (MajorIn(tim, computerScience) → (Wear(tim, tshirtsWithBulldogLogo) ⊕ From(tim, yaleRunningClub)))", "query": {"NL": "Is it true that Tim majors in computer science.?", "FOL": "Is MajorIn(tim, computerScience) true?"}}
{"premises": "All runners who ranked in the top 1000 in the Boston Marathon finished the marathon within 3 hours.\nAll runners from the Yale Running Club ranked in the top 1000 in the Boston Marathon.\nAll runners wearing T-shirts with the bulldog logo are from Yale Running Club.\nSome of the runners wearing T-shirts with the bulldog logo are majoring in Computer Science\nTim is a runner and if Tim finishes the Boston Marathon within 3 hours, then he is not both from Yale Running Club and ranked in the top 1000 in the Boston Marathon. \nTim is a runner and if Tim majors in computer science, then he is either wearing a T-shirt with the bulldog logo or is a runner from the Yale Running Club.", "premises-FOL": "∀x (Runner(x) ∧ RankedIn(x, top1000, bostonMarathon) → FinishWithin(x, bostonMarathon, 3Hours))\n∀x (Runner(x) ∧ From(x, yaleRunningClub) → RankedIn(x, top1000, bostonMarathon))\n∀x (Runner(x) ∧ Wear(x, tshirtsWithBulldogLogo) → From(x, yaleRunningClub))\n∃x (Runner(x) ∧ Wear(x, tshirtsWithBulldogLogo) ∧ MajorIn(x, computerScience))\nRunner(tim) ∧ (FinishWithin(x, bostonMarathon, 3Hours) → ¬(From(tim, yaleRunningClub) ∧ RankedIn(tim, top1000, bostonMarathon)))\nRunner(tim) ∧ (MajorIn(tim, computerScience) → (Wear(tim, tshirtsWithBulldogLogo) ⊕ From(tim, yaleRunningClub)))", "query": {"NL": "Is it true that Tim is neither majoring in computer science nor is he from Yale Club Running.?", "FOL": "Is ¬MajorIn(tim, computerScience) ∧ ¬From(tim, yaleRunningClub) true?"}}
{"premises": "All runners who ranked in the top 1000 in the Boston Marathon finished the marathon within 3 hours.\nAll runners from the Yale Running Club ranked in the top 1000 in the Boston Marathon.\nAll runners wearing T-shirts with the bulldog logo are from Yale Running Club.\nSome of the runners wearing T-shirts with the bulldog logo are majoring in Computer Science\nTim is a runner and if Tim finishes the Boston Marathon within 3 hours, then he is not both from Yale Running Club and ranked in the top 1000 in the Boston Marathon. \nTim is a runner and if Tim majors in computer science, then he is either wearing a T-shirt with the bulldog logo or is a runner from the Yale Running Club.", "premises-FOL": "∀x (Runner(x) ∧ RankedIn(x, top1000, bostonMarathon) → FinishWithin(x, bostonMarathon, 3Hours))\n∀x (Runner(x) ∧ From(x, yaleRunningClub) → RankedIn(x, top1000, bostonMarathon))\n∀x (Runner(x) ∧ Wear(x, tshirtsWithBulldogLogo) → From(x, yaleRunningClub))\n∃x (Runner(x) ∧ Wear(x, tshirtsWithBulldogLogo) ∧ MajorIn(x, computerScience))\nRunner(tim) ∧ (FinishWithin(x, bostonMarathon, 3Hours) → ¬(From(tim, yaleRunningClub) ∧ RankedIn(tim, top1000, bostonMarathon)))\nRunner(tim) ∧ (MajorIn(tim, computerScience) → (Wear(tim, tshirtsWithBulldogLogo) ⊕ From(tim, yaleRunningClub)))", "query": {"NL": "Is it true that Tim finished the Boston Marathon within 3 hours.?", "FOL": "Is FinishWithin(tim, bostonMarathon, 3Hours) true?"}}
{"premises": "No flower is noisy.\nRoses are flowers.", "premises-FOL": "∀x (Flower(x) → ¬Noisy(x))\n∀x (Rose(x) → Flower(x))", "query": {"NL": "Is it true that Some roses are noisy.?", "FOL": "Is ∃x ∃y (Rose(x) ∧ Rose(y) ∧ Noisy(x) ∧ Noisy(y) ∧ ¬(x=y)) true?"}}
{"premises": "An optical engineer studies science and studies engineering.\nSomeone who studies optical engineering is an optical engineer.\nAn optical engineer studies the generation, transmission, or detection of light.\nMurphy is an optical engineer.", "premises-FOL": "∀x (OpticalEngineer(x) → Study(x, science) ∧ Study(x, engineering))\n∀x (Study(x, opticalEngineering) → OpticalEngineer(x))\n∀x (OpticalEngineer(x) → Study(x, lightGeneration) ∨ Study(x, lightTransmission) ∨ Study(x, lightDetection))\nOpticalEngineer(murphy)", "query": {"NL": "Is it true that Murphy doesn't study the generation, transmission, or detection of light.?", "FOL": "Is ¬Study(murphy, lightGeneration) ∧ ¬Study(murphy, lightTransmission) ∧ ¬Study(murphy, lightDetection)) true?"}}
{"premises": "An optical engineer studies science and studies engineering.\nSomeone who studies optical engineering is an optical engineer.\nAn optical engineer studies the generation, transmission, or detection of light.\nMurphy is an optical engineer.", "premises-FOL": "∀x (OpticalEngineer(x) → Study(x, science) ∧ Study(x, engineering))\n∀x (Study(x, opticalEngineering) → OpticalEngineer(x))\n∀x (OpticalEngineer(x) → Study(x, lightGeneration) ∨ Study(x, lightTransmission) ∨ Study(x, lightDetection))\nOpticalEngineer(murphy)", "query": {"NL": "Is it true that Murphy studies science.?", "FOL": "Is Study(murphy, science) true?"}}
{"premises": "An optical engineer studies science and studies engineering.\nSomeone who studies optical engineering is an optical engineer.\nAn optical engineer studies the generation, transmission, or detection of light.\nMurphy is an optical engineer.", "premises-FOL": "∀x (OpticalEngineer(x) → Study(x, science) ∧ Study(x, engineering))\n∀x (Study(x, opticalEngineering) → OpticalEngineer(x))\n∀x (OpticalEngineer(x) → Study(x, lightGeneration) ∨ Study(x, lightTransmission) ∨ Study(x, lightDetection))\nOpticalEngineer(murphy)", "query": {"NL": "Is it true that Someone studies engineering.?", "FOL": "Is ∃x (Study(x, engineering)) true?"}}
{"premises": "If Jane's friends wear scrubs every day, then they work in hospital settings.\nIf Jane's friends often wear casual outfits to work regularly, then they do not work in hospital settings.\nAll of Jane's friends who work in the laboratory wear scrubs every day.\nAll of Jane's friends who enjoy engineering and work in a related profession work in the laboratory.\nAll of Jane's friends who are more inclined towards analytical career paths also enjoy engineering and work in a related profession.\nMartha is Jane's friend, and she either enjoys engineering and works in a related profession or she wears scrubs every day.", "premises-FOL": "∀x (JanesFriend(x) ∧ WearEveryDay(x, scrub) → WorkIn(x, hospital))\n∀x (JanesFriend(x) ∧ WearRegularly(x, casualOutfit, toWork) → ¬WorkIn(x, hospital))\n∀x (JanesFriend(x) ∧ WorkIn(x, lab) → Wear(x, scrub))\n∀x (JanesFriend(x) ∧ Like(x, engineering) ∧ (∃y (WorkIn(x, y) ∧ RelatedTo(y, engineering) ∧ Profession(y))) → WorkIn(x, lab))\n∀x (JanesFriend(x) ∧ InclinedTowards(x, analyticalCareer) → LikeEngineering(x) ∧ (∃y (WorkIn(x, y) ∧ RelatedTo(y, engineering) ∧ Profession(y))))\nJanesFriend(martha) ∧ ((LikeEngineering(martha) ∧ (∃y (WorkIn(x, y) ∧ RelatedTo(y, engineering) ∧ Profession(y)))) ⊕ WearEveryDay(martha, scrub)))", "query": {"NL": "Is it true that Martha is Jane's friend and she works in the laboratory.?", "FOL": "Is JanesFriends(martha) ∧ (WorkIn(martha, lab)) true?"}}
{"premises": "If Jane's friends wear scrubs every day, then they work in hospital settings.\nIf Jane's friends often wear casual outfits to work regularly, then they do not work in hospital settings.\nAll of Jane's friends who work in the laboratory wear scrubs every day.\nAll of Jane's friends who enjoy engineering and work in a related profession work in the laboratory.\nAll of Jane's friends who are more inclined towards analytical career paths also enjoy engineering and work in a related profession.\nMartha is Jane's friend, and she either enjoys engineering and works in a related profession or she wears scrubs every day.", "premises-FOL": "∀x (JanesFriend(x) ∧ WearEveryDay(x, scrub) → WorkIn(x, hospital))\n∀x (JanesFriend(x) ∧ WearRegularly(x, casualOutfit, toWork) → ¬WorkIn(x, hospital))\n∀x (JanesFriend(x) ∧ WorkIn(x, lab) → Wear(x, scrub))\n∀x (JanesFriend(x) ∧ Like(x, engineering) ∧ (∃y (WorkIn(x, y) ∧ RelatedTo(y, engineering) ∧ Profession(y))) → WorkIn(x, lab))\n∀x (JanesFriend(x) ∧ InclinedTowards(x, analyticalCareer) → LikeEngineering(x) ∧ (∃y (WorkIn(x, y) ∧ RelatedTo(y, engineering) ∧ Profession(y))))\nJanesFriend(martha) ∧ ((LikeEngineering(martha) ∧ (∃y (WorkIn(x, y) ∧ RelatedTo(y, engineering) ∧ Profession(y)))) ⊕ WearEveryDay(martha, scrub)))", "query": {"NL": "Is it true that Martha is Jane's friend and she either often wears casual outfits to work regularly or is more inclined toward analytical career paths.?", "FOL": "Is JanesFriends(martha) ∧ (WearRegularly(martha, casualOutfit, toWork) ∨ InclinedTowards(martha, analyticalCareer)) true?"}}
{"premises": "If Jane's friends wear scrubs every day, then they work in hospital settings.\nIf Jane's friends often wear casual outfits to work regularly, then they do not work in hospital settings.\nAll of Jane's friends who work in the laboratory wear scrubs every day.\nAll of Jane's friends who enjoy engineering and work in a related profession work in the laboratory.\nAll of Jane's friends who are more inclined towards analytical career paths also enjoy engineering and work in a related profession.\nMartha is Jane's friend, and she either enjoys engineering and works in a related profession or she wears scrubs every day.", "premises-FOL": "∀x (JanesFriend(x) ∧ WearEveryDay(x, scrub) → WorkIn(x, hospital))\n∀x (JanesFriend(x) ∧ WearRegularly(x, casualOutfit, toWork) → ¬WorkIn(x, hospital))\n∀x (JanesFriend(x) ∧ WorkIn(x, lab) → Wear(x, scrub))\n∀x (JanesFriend(x) ∧ Like(x, engineering) ∧ (∃y (WorkIn(x, y) ∧ RelatedTo(y, engineering) ∧ Profession(y))) → WorkIn(x, lab))\n∀x (JanesFriend(x) ∧ InclinedTowards(x, analyticalCareer) → LikeEngineering(x) ∧ (∃y (WorkIn(x, y) ∧ RelatedTo(y, engineering) ∧ Profession(y))))\nJanesFriend(martha) ∧ ((LikeEngineering(martha) ∧ (∃y (WorkIn(x, y) ∧ RelatedTo(y, engineering) ∧ Profession(y)))) ⊕ WearEveryDay(martha, scrub)))", "query": {"NL": "Is it true that Martha is Jane's friend and she either wears casual outfits to work regularly and is more inclined toward analytical career paths or she neither wears casual outfits to work regularly nor is more inclined towards analytical career paths.?", "FOL": "Is JanesFriends(martha) ∧ ¬(WearRegularly(martha, casualOutfit, toWork) ⊕ InclinedTowards(martha, analyticalCareer)) true?"}}
{"premises": "All children are human.\nIf someone is underage, then they are a child.\nPeople are either underage or of age.\nIf someone is of age, then they can vote.\nIf someone is of age, they can legally get married.\nIf Jack is a child and a human, then Jack is neither able to vote nor get married.", "premises-FOL": "∀x (Child(x) → Human(x))\n∀x (Underage(x) → Child(x)) \n∀x (Underage(x) ⊕ OfAge(x))\n∀x (OfAge(x) → CanVote(x))\n∀x (OfAge(x) → CanGetMarried(x))\nChild(jack) ∧ Human(jack) → (¬CanVote(jack) ∧ ¬CanGetMarried(jack))", "query": {"NL": "Is it true that Jack is a human.?", "FOL": "Is Human(jack) true?"}}
{"premises": "All children are human.\nIf someone is underage, then they are a child.\nPeople are either underage or of age.\nIf someone is of age, then they can vote.\nIf someone is of age, they can legally get married.\nIf Jack is a child and a human, then Jack is neither able to vote nor get married.", "premises-FOL": "∀x (Child(x) → Human(x))\n∀x (Underage(x) → Child(x)) \n∀x (Underage(x) ⊕ OfAge(x))\n∀x (OfAge(x) → CanVote(x))\n∀x (OfAge(x) → CanGetMarried(x))\nChild(jack) ∧ Human(jack) → (¬CanVote(jack) ∧ ¬CanGetMarried(jack))", "query": {"NL": "Is it true that Jack is able to vote and get married.?", "FOL": "Is CanVote(jack) ∧ CanGetMarried(jack) true?"}}
{"premises": "All children are human.\nIf someone is underage, then they are a child.\nPeople are either underage or of age.\nIf someone is of age, then they can vote.\nIf someone is of age, they can legally get married.\nIf Jack is a child and a human, then Jack is neither able to vote nor get married.", "premises-FOL": "∀x (Child(x) → Human(x))\n∀x (Underage(x) → Child(x)) \n∀x (Underage(x) ⊕ OfAge(x))\n∀x (OfAge(x) → CanVote(x))\n∀x (OfAge(x) → CanGetMarried(x))\nChild(jack) ∧ Human(jack) → (¬CanVote(jack) ∧ ¬CanGetMarried(jack))", "query": {"NL": "Is it true that Jack is either able to vote or legally able to get married.?", "FOL": "Is CanVote(jack) ⊕ CanGetMarried(jack) true?"}}
{"premises": "The University of Oxford is a collegiate research university.\nThe University of Edinburgh is a collegiate research university officially opened in 1583 in England.\nThe University of Oxford is older than all other collegiate research universities in England.\nIf one collegiate research university is older than another collegiate research university, then the other university can't be older than the first university.\nOxford has educated a wide range of notable alums, including prime ministers of the United Kingdom and heads of state and government.\nThere are Nobel Prize laureates, Fields Medalists, and Turing Award winners who have studied at the University of Oxford.", "premises-FOL": "CollegiateResearchUniversity(universityOfOxford)\nOpenedIn(universityOfEdinburgh, y1583) ∧ InEngland(universityOfEdinburgh) ∧ CollegiateResearchUniversity(universityOfEdinburgh)\n∀x (CollegiateResearchUniversity(x) ∧ InEngland(x) → Older(universityOfOxford, x))\n∀x (CollegiateResearchUniversity(x) ∧ InEngland(x) ∧ ¬(x=universityOfOxford) → Older(universityOfOxford, x))\n∃x ∃y ∃z ∃u ∃v ∃w ((NotableAlumniFrom(x, universityOfOxford) ∧ PrimeMinisterOfUnitedKingdom(x)) ∧ (NotableAlumniFrom(y, universityOfOxford) ∧ HeadOfState(y)) ∧ (NotableAlumniFrom(z, universityOfOxford) ∧ HeadOfGovernment(z)) ∧ (NotableAlumniFrom(u, universityOfOxford) ∧ PrimeMinisterOfUnitedKingdom(u)) ∧ (NotableAlumniFrom(v, universityOfOxford) ∧ HeadOfState(v)) ∧ (NotableAlumniFrom(w, universityOfOxford) ∧ HeadOfGovernment(w)))\n∃x ∃y ∃z ∃u ∃v ∃w ((StudiedAt(x, universityOfOxford) ∧ NobelPrizeLaureate(x)) ∧ (StudiedAt(u, universityOfOxford) ∧ NobelPrizeLaureate(u)) ∧ (StudiedAt(y, universityOfOxford) ∧ FieldsMedalist(y)) ∧ (StudiedAt(v, universityOfOxford) ∧ FieldsMedalist(v)) ∧ (StudiedAt(z, universityOfOxford) ∧ TuringAwardWinner(z)) ∧ (StudiedAt(w, universityOfOxford) ∧ TuringAwardWinner(w)))", "query": {"NL": "Is it true that The University of Oxford is ranked among the most prestigious universities in the world.?", "FOL": "Is RankedAmongPrestigousUniversities(universityOfOxford) true?"}}
{"premises": "The University of Oxford is a collegiate research university.\nThe University of Edinburgh is a collegiate research university officially opened in 1583 in England.\nThe University of Oxford is older than all other collegiate research universities in England.\nIf one collegiate research university is older than another collegiate research university, then the other university can't be older than the first university.\nOxford has educated a wide range of notable alums, including prime ministers of the United Kingdom and heads of state and government.\nThere are Nobel Prize laureates, Fields Medalists, and Turing Award winners who have studied at the University of Oxford.", "premises-FOL": "CollegiateResearchUniversity(universityOfOxford)\nOpenedIn(universityOfEdinburgh, y1583) ∧ InEngland(universityOfEdinburgh) ∧ CollegiateResearchUniversity(universityOfEdinburgh)\n∀x (CollegiateResearchUniversity(x) ∧ InEngland(x) → Older(universityOfOxford, x))\n∀x (CollegiateResearchUniversity(x) ∧ InEngland(x) ∧ ¬(x=universityOfOxford) → Older(universityOfOxford, x))\n∃x ∃y ∃z ∃u ∃v ∃w ((NotableAlumniFrom(x, universityOfOxford) ∧ PrimeMinisterOfUnitedKingdom(x)) ∧ (NotableAlumniFrom(y, universityOfOxford) ∧ HeadOfState(y)) ∧ (NotableAlumniFrom(z, universityOfOxford) ∧ HeadOfGovernment(z)) ∧ (NotableAlumniFrom(u, universityOfOxford) ∧ PrimeMinisterOfUnitedKingdom(u)) ∧ (NotableAlumniFrom(v, universityOfOxford) ∧ HeadOfState(v)) ∧ (NotableAlumniFrom(w, universityOfOxford) ∧ HeadOfGovernment(w)))\n∃x ∃y ∃z ∃u ∃v ∃w ((StudiedAt(x, universityOfOxford) ∧ NobelPrizeLaureate(x)) ∧ (StudiedAt(u, universityOfOxford) ∧ NobelPrizeLaureate(u)) ∧ (StudiedAt(y, universityOfOxford) ∧ FieldsMedalist(y)) ∧ (StudiedAt(v, universityOfOxford) ∧ FieldsMedalist(v)) ∧ (StudiedAt(z, universityOfOxford) ∧ TuringAwardWinner(z)) ∧ (StudiedAt(w, universityOfOxford) ∧ TuringAwardWinner(w)))", "query": {"NL": "Is it true that The University of Edinburgh is older than The University of Oxford.?", "FOL": "Is IsOlder(universityOfEdinburgh, universityOfOxford) true?"}}
{"premises": "The University of Oxford is a collegiate research university.\nThe University of Edinburgh is a collegiate research university officially opened in 1583 in England.\nThe University of Oxford is older than all other collegiate research universities in England.\nIf one collegiate research university is older than another collegiate research university, then the other university can't be older than the first university.\nOxford has educated a wide range of notable alums, including prime ministers of the United Kingdom and heads of state and government.\nThere are Nobel Prize laureates, Fields Medalists, and Turing Award winners who have studied at the University of Oxford.", "premises-FOL": "CollegiateResearchUniversity(universityOfOxford)\nOpenedIn(universityOfEdinburgh, y1583) ∧ InEngland(universityOfEdinburgh) ∧ CollegiateResearchUniversity(universityOfEdinburgh)\n∀x (CollegiateResearchUniversity(x) ∧ InEngland(x) → Older(universityOfOxford, x))\n∀x (CollegiateResearchUniversity(x) ∧ InEngland(x) ∧ ¬(x=universityOfOxford) → Older(universityOfOxford, x))\n∃x ∃y ∃z ∃u ∃v ∃w ((NotableAlumniFrom(x, universityOfOxford) ∧ PrimeMinisterOfUnitedKingdom(x)) ∧ (NotableAlumniFrom(y, universityOfOxford) ∧ HeadOfState(y)) ∧ (NotableAlumniFrom(z, universityOfOxford) ∧ HeadOfGovernment(z)) ∧ (NotableAlumniFrom(u, universityOfOxford) ∧ PrimeMinisterOfUnitedKingdom(u)) ∧ (NotableAlumniFrom(v, universityOfOxford) ∧ HeadOfState(v)) ∧ (NotableAlumniFrom(w, universityOfOxford) ∧ HeadOfGovernment(w)))\n∃x ∃y ∃z ∃u ∃v ∃w ((StudiedAt(x, universityOfOxford) ∧ NobelPrizeLaureate(x)) ∧ (StudiedAt(u, universityOfOxford) ∧ NobelPrizeLaureate(u)) ∧ (StudiedAt(y, universityOfOxford) ∧ FieldsMedalist(y)) ∧ (StudiedAt(v, universityOfOxford) ∧ FieldsMedalist(v)) ∧ (StudiedAt(z, universityOfOxford) ∧ TuringAwardWinner(z)) ∧ (StudiedAt(w, universityOfOxford) ∧ TuringAwardWinner(w)))", "query": {"NL": "Is it true that The University of Oxford is made up of thirty-nine semi-autonomous constituent colleges.?", "FOL": "Is MadeUpOf(universityOfOxford, thirtyninecolleges) true?"}}
{"premises": "A boat floats on water.\nThere are bricks on the boat.", "premises-FOL": "FloatOn(boat, water)\n∃x (Brick(x) ∧ On(x, boat))", "query": {"NL": "Is it true that Bricks float on water.?", "FOL": "Is ∀x (Brick(x) ∧ FloatOn(x, water)) true?"}}
{"premises": "All employees under Peter are engineers or scientists.\nIf an employee under Peter is an engineer, then the employee is hard-working.\nIf an employee under Peter is a scientist, then the employee is well compensated.\nIf an employee under Peter is well compensated, then the employee does not work remotely. \nIf an employee under Peter refuses to work in person, then the employee works remotely. \nPan is an employee under Peter and if Pan is not both working remotely and well-compensated, then Pan works remotely. ", "premises-FOL": "∀x (Empolyee(x) ∧ ManagedBy(x, peter) → Engineer(x) ∨ Scientist(x))\n∀x (Empolyee(x) ∧ ManagedBy(x, peter) ∧ Engineer(x) → HardWorking(x))\n∀x (Empolyee(x) ∧ ManagedBy(x, peter) ∧ Scientist(x) → WellCompensated(x))\n∀x (Empolyee(x) ∧ ManagedBy(x, peter) ∧ WellCompensated(x) → ¬WorkRemotely(x))\n∀x (Empolyee(x) ∧ ManagedBy(x, peter) ∧ RefuseToWorkInPerson(x) → WorkRemotely(x))\nEmpolyee(pan) ∧ ManagedBy(pan, peter) ∧ (¬(WorkRemotely(pan) ∧ WellCompensated(pan)) → WorkRemotely(pan))", "query": {"NL": "Is it true that Pan refuses to work in person.?", "FOL": "Is RefuseToWorkInPerson(pan) true?"}}
{"premises": "All employees under Peter are engineers or scientists.\nIf an employee under Peter is an engineer, then the employee is hard-working.\nIf an employee under Peter is a scientist, then the employee is well compensated.\nIf an employee under Peter is well compensated, then the employee does not work remotely. \nIf an employee under Peter refuses to work in person, then the employee works remotely. \nPan is an employee under Peter and if Pan is not both working remotely and well-compensated, then Pan works remotely. ", "premises-FOL": "∀x (Empolyee(x) ∧ ManagedBy(x, peter) → Engineer(x) ∨ Scientist(x))\n∀x (Empolyee(x) ∧ ManagedBy(x, peter) ∧ Engineer(x) → HardWorking(x))\n∀x (Empolyee(x) ∧ ManagedBy(x, peter) ∧ Scientist(x) → WellCompensated(x))\n∀x (Empolyee(x) ∧ ManagedBy(x, peter) ∧ WellCompensated(x) → ¬WorkRemotely(x))\n∀x (Empolyee(x) ∧ ManagedBy(x, peter) ∧ RefuseToWorkInPerson(x) → WorkRemotely(x))\nEmpolyee(pan) ∧ ManagedBy(pan, peter) ∧ (¬(WorkRemotely(pan) ∧ WellCompensated(pan)) → WorkRemotely(pan))", "query": {"NL": "Is it true that Pan refuses to work in person or is hard-working.?", "FOL": "Is RefuseToWorkInPerson(pan) ∨ HardWorking(pan) true?"}}
{"premises": "All employees under Peter are engineers or scientists.\nIf an employee under Peter is an engineer, then the employee is hard-working.\nIf an employee under Peter is a scientist, then the employee is well compensated.\nIf an employee under Peter is well compensated, then the employee does not work remotely. \nIf an employee under Peter refuses to work in person, then the employee works remotely. \nPan is an employee under Peter and if Pan is not both working remotely and well-compensated, then Pan works remotely. ", "premises-FOL": "∀x (Empolyee(x) ∧ ManagedBy(x, peter) → Engineer(x) ∨ Scientist(x))\n∀x (Empolyee(x) ∧ ManagedBy(x, peter) ∧ Engineer(x) → HardWorking(x))\n∀x (Empolyee(x) ∧ ManagedBy(x, peter) ∧ Scientist(x) → WellCompensated(x))\n∀x (Empolyee(x) ∧ ManagedBy(x, peter) ∧ WellCompensated(x) → ¬WorkRemotely(x))\n∀x (Empolyee(x) ∧ ManagedBy(x, peter) ∧ RefuseToWorkInPerson(x) → WorkRemotely(x))\nEmpolyee(pan) ∧ ManagedBy(pan, peter) ∧ (¬(WorkRemotely(pan) ∧ WellCompensated(pan)) → WorkRemotely(pan))", "query": {"NL": "Is it true that Pan neither refuses to work in person nor is hard-working.?", "FOL": "Is ¬RefuseToWorkInPerson(pan) ∧ ¬HardWorking(pan) true?"}}
{"premises": "If someone has never left the United States, then they have not been to Europe.\nIf someone has traveled to the Iberian Peninsula, then they have been to Europe.\nEveryone who has visited Barcelona has traveled to the Iberian Peninsula.\nEveryone who has taken a selfie at the Basilica Familia Sagrada has visited Madrid.\nIf Kate has either taken a selfie at the Basilica Familia Sagrada or has never left the United States, then Kate has not either visited Barcelona or never left the United States.", "premises-FOL": "∀x (¬Left(x, uSA) → ¬BeenTo(x, europe))\n∀x (HaveTraveledTo(x, iberianPeninsula) → BeenTo(x, europe))\n∀x (HaveVisited(x, barcelona) → HaveTraveledTo(x, iberianPeninsula))\n∀x (TakenSelfieAt(x, basilicaSagradaFamilia) → HaveVisited(x, barcelona))\nTakenSelfieAt(kate, basilicaSagradaFamilia) ⊕ NeverLeft(kate, uSA) → ¬(HaveVisited(kate, barcelona) ⊕ NeverLeft(kate, uSA))", "query": {"NL": "Is it true that Kate has traveled to Spain.?", "FOL": "Is HaveTraveledTo(kate, iberianPeninsula) true?"}}
{"premises": "If someone has never left the United States, then they have not been to Europe.\nIf someone has traveled to the Iberian Peninsula, then they have been to Europe.\nEveryone who has visited Barcelona has traveled to the Iberian Peninsula.\nEveryone who has taken a selfie at the Basilica Familia Sagrada has visited Madrid.\nIf Kate has either taken a selfie at the Basilica Familia Sagrada or has never left the United States, then Kate has not either visited Barcelona or never left the United States.", "premises-FOL": "∀x (¬Left(x, uSA) → ¬BeenTo(x, europe))\n∀x (HaveTraveledTo(x, iberianPeninsula) → BeenTo(x, europe))\n∀x (HaveVisited(x, barcelona) → HaveTraveledTo(x, iberianPeninsula))\n∀x (TakenSelfieAt(x, basilicaSagradaFamilia) → HaveVisited(x, barcelona))\nTakenSelfieAt(kate, basilicaSagradaFamilia) ⊕ NeverLeft(kate, uSA) → ¬(HaveVisited(kate, barcelona) ⊕ NeverLeft(kate, uSA))", "query": {"NL": "Is it true that Kate has taken a selfie at the Basilica Familia Sagrada.?", "FOL": "Is TakenSelfieAt(kate, basilicaSagradaFamilia) true?"}}
{"premises": "If someone has never left the United States, then they have not been to Europe.\nIf someone has traveled to the Iberian Peninsula, then they have been to Europe.\nEveryone who has visited Barcelona has traveled to the Iberian Peninsula.\nEveryone who has taken a selfie at the Basilica Familia Sagrada has visited Madrid.\nIf Kate has either taken a selfie at the Basilica Familia Sagrada or has never left the United States, then Kate has not either visited Barcelona or never left the United States.", "premises-FOL": "∀x (¬Left(x, uSA) → ¬BeenTo(x, europe))\n∀x (HaveTraveledTo(x, iberianPeninsula) → BeenTo(x, europe))\n∀x (HaveVisited(x, barcelona) → HaveTraveledTo(x, iberianPeninsula))\n∀x (TakenSelfieAt(x, basilicaSagradaFamilia) → HaveVisited(x, barcelona))\nTakenSelfieAt(kate, basilicaSagradaFamilia) ⊕ NeverLeft(kate, uSA) → ¬(HaveVisited(kate, barcelona) ⊕ NeverLeft(kate, uSA))", "query": {"NL": "Is it true that Kate has not taken a selfie at the Basilica Familia Sagrada.?", "FOL": "Is ¬TakenSelfieAt(kate, basilicaSagradaFamilia) true?"}}
{"premises": "If someone has never left the United States, then they have not been to Europe.\nIf someone has traveled to the Iberian Peninsula, then they have been to Europe.\nEveryone who has visited Barcelona has traveled to the Iberian Peninsula.\nEveryone who has taken a selfie at the Basilica Familia Sagrada has visited Madrid.\nIf Kate has either taken a selfie at the Basilica Familia Sagrada or has never left the United States, then Kate has not either visited Barcelona or never left the United States.", "premises-FOL": "∀x (¬Left(x, uSA) → ¬BeenTo(x, europe))\n∀x (HaveTraveledTo(x, iberianPeninsula) → BeenTo(x, europe))\n∀x (HaveVisited(x, barcelona) → HaveTraveledTo(x, iberianPeninsula))\n∀x (TakenSelfieAt(x, basilicaSagradaFamilia) → HaveVisited(x, barcelona))\nTakenSelfieAt(kate, basilicaSagradaFamilia) ⊕ NeverLeft(kate, uSA) → ¬(HaveVisited(kate, barcelona) ⊕ NeverLeft(kate, uSA))", "query": {"NL": "Is it true that Kate has never left the United States.?", "FOL": "Is NeverLeft(kate, uSA) true?"}}
{"premises": "If someone has never left the United States, then they have not been to Europe.\nIf someone has traveled to the Iberian Peninsula, then they have been to Europe.\nEveryone who has visited Barcelona has traveled to the Iberian Peninsula.\nEveryone who has taken a selfie at the Basilica Familia Sagrada has visited Madrid.\nIf Kate has either taken a selfie at the Basilica Familia Sagrada or has never left the United States, then Kate has not either visited Barcelona or never left the United States.", "premises-FOL": "∀x (¬Left(x, uSA) → ¬BeenTo(x, europe))\n∀x (HaveTraveledTo(x, iberianPeninsula) → BeenTo(x, europe))\n∀x (HaveVisited(x, barcelona) → HaveTraveledTo(x, iberianPeninsula))\n∀x (TakenSelfieAt(x, basilicaSagradaFamilia) → HaveVisited(x, barcelona))\nTakenSelfieAt(kate, basilicaSagradaFamilia) ⊕ NeverLeft(kate, uSA) → ¬(HaveVisited(kate, barcelona) ⊕ NeverLeft(kate, uSA))", "query": {"NL": "Is it true that Kate has left the United States before.?", "FOL": "Is ¬NeverLeft(kate, uSA) true?"}}
{"premises": "If someone has never left the United States, then they have not been to Europe.\nIf someone has traveled to the Iberian Peninsula, then they have been to Europe.\nEveryone who has visited Barcelona has traveled to the Iberian Peninsula.\nEveryone who has taken a selfie at the Basilica Familia Sagrada has visited Madrid.\nIf Kate has either taken a selfie at the Basilica Familia Sagrada or has never left the United States, then Kate has not either visited Barcelona or never left the United States.", "premises-FOL": "∀x (¬Left(x, uSA) → ¬BeenTo(x, europe))\n∀x (HaveTraveledTo(x, iberianPeninsula) → BeenTo(x, europe))\n∀x (HaveVisited(x, barcelona) → HaveTraveledTo(x, iberianPeninsula))\n∀x (TakenSelfieAt(x, basilicaSagradaFamilia) → HaveVisited(x, barcelona))\nTakenSelfieAt(kate, basilicaSagradaFamilia) ⊕ NeverLeft(kate, uSA) → ¬(HaveVisited(kate, barcelona) ⊕ NeverLeft(kate, uSA))", "query": {"NL": "Is it true that Kate either has taken a selfie at the Basilica Familia Sagrada  or has never left the United States.?", "FOL": "Is TakenSelfieAt(kate, basilicaSagradaFamilia) ⊕ NeverLeft(kate, uSA) true?"}}
{"premises": "If someone has never left the United States, then they have not been to Europe.\nIf someone has traveled to the Iberian Peninsula, then they have been to Europe.\nEveryone who has visited Barcelona has traveled to the Iberian Peninsula.\nEveryone who has taken a selfie at the Basilica Familia Sagrada has visited Madrid.\nIf Kate has either taken a selfie at the Basilica Familia Sagrada or has never left the United States, then Kate has not either visited Barcelona or never left the United States.", "premises-FOL": "∀x (¬Left(x, uSA) → ¬BeenTo(x, europe))\n∀x (HaveTraveledTo(x, iberianPeninsula) → BeenTo(x, europe))\n∀x (HaveVisited(x, barcelona) → HaveTraveledTo(x, iberianPeninsula))\n∀x (TakenSelfieAt(x, basilicaSagradaFamilia) → HaveVisited(x, barcelona))\nTakenSelfieAt(kate, basilicaSagradaFamilia) ⊕ NeverLeft(kate, uSA) → ¬(HaveVisited(kate, barcelona) ⊕ NeverLeft(kate, uSA))", "query": {"NL": "Is it true that If Kate has not both taken a selfie at the Basilica Familia Sagrada and been to Europe, then Kate has left the United States before.?", "FOL": "Is ¬(TakenSelfieAt(kate, basilicaSagradaFamilia) ∧ BeenTo(kate, europe)) → ¬NeverLeft(kate, uSA) true?"}}
{"premises": "If someone has never left the United States, then they have not been to Europe.\nIf someone has traveled to the Iberian Peninsula, then they have been to Europe.\nEveryone who has visited Barcelona has traveled to the Iberian Peninsula.\nEveryone who has taken a selfie at the Basilica Familia Sagrada has visited Madrid.\nIf Kate has either taken a selfie at the Basilica Familia Sagrada or has never left the United States, then Kate has not either visited Barcelona or never left the United States.", "premises-FOL": "∀x (¬Left(x, uSA) → ¬BeenTo(x, europe))\n∀x (HaveTraveledTo(x, iberianPeninsula) → BeenTo(x, europe))\n∀x (HaveVisited(x, barcelona) → HaveTraveledTo(x, iberianPeninsula))\n∀x (TakenSelfieAt(x, basilicaSagradaFamilia) → HaveVisited(x, barcelona))\nTakenSelfieAt(kate, basilicaSagradaFamilia) ⊕ NeverLeft(kate, uSA) → ¬(HaveVisited(kate, barcelona) ⊕ NeverLeft(kate, uSA))", "query": {"NL": "Is it true that If Kate has not both taken a selfie at the Basilica Familia Sagrada and been to Europe, then Kate has taken a selfie at the Basilica Familia Sagrada.?", "FOL": "Is ¬(TakenSelfieAt(kate, basilicaSagradaFamilia) ∧ BeenTo(kate, europe)) → TakenSelfieAt(kate, basilicaSagradaFamilia) true?"}}
{"premises": "Pulp is an English band.\nJarvis Cocker was a member of Pulp.\nIn 2014 a documentary about Pulp was released.\nDocumentaries about bands feature the members.\nPulp released an album that reached the number one spot in the UK Albums Chart.", "premises-FOL": "EnglishBand(pulp)\nMemberOf(jamescocker, pulp)\n∃x (DocumentaryAbout(x , pulp) ∧ ReleaseIn(x , 2014))\n∀x ∀y ∀z (MemberOf(z, y) ∧ DocumentaryAbout(x , y) → DocumentaryFeature(z))\n∃x (Release(pulp, x) ∧ ReachNumberOneSpotIn(x, uKAlbumChart))", "query": {"NL": "Is it true that Pulp is a band from England.?", "FOL": "Is EnglishBand(pulp) true?"}}
{"premises": "Pulp is an English band.\nJarvis Cocker was a member of Pulp.\nIn 2014 a documentary about Pulp was released.\nDocumentaries about bands feature the members.\nPulp released an album that reached the number one spot in the UK Albums Chart.", "premises-FOL": "EnglishBand(pulp)\nMemberOf(jamescocker, pulp)\n∃x (DocumentaryAbout(x , pulp) ∧ ReleaseIn(x , 2014))\n∀x ∀y ∀z (MemberOf(z, y) ∧ DocumentaryAbout(x , y) → DocumentaryFeature(z))\n∃x (Release(pulp, x) ∧ ReachNumberOneSpotIn(x, uKAlbumChart))", "query": {"NL": "Is it true that Jarvis Cocker was featured in a documentary.?", "FOL": "Is DocumentaryFeature(jamescocker) true?"}}
{"premises": "Pulp is an English band.\nJarvis Cocker was a member of Pulp.\nIn 2014 a documentary about Pulp was released.\nDocumentaries about bands feature the members.\nPulp released an album that reached the number one spot in the UK Albums Chart.", "premises-FOL": "EnglishBand(pulp)\nMemberOf(jamescocker, pulp)\n∃x (DocumentaryAbout(x , pulp) ∧ ReleaseIn(x , 2014))\n∀x ∀y ∀z (MemberOf(z, y) ∧ DocumentaryAbout(x , y) → DocumentaryFeature(z))\n∃x (Release(pulp, x) ∧ ReachNumberOneSpotIn(x, uKAlbumChart))", "query": {"NL": "Is it true that Pulp is the best band.?", "FOL": "Is BestBand(pulp) true?"}}
{"premises": "On December 1, 30 days remain until the end of the year in the Gregorian calendar.\nDecember 1, 1970, was a Tuesday.\nDecember 1, 2021, was a Wednesday.\nToday is Thursday.", "premises-FOL": "∀x (December1st(x) ∧ GeorgianCalendar(x) → ThirtyDaysRemainUntilTheEndOfTheYear(x))\nDecember1st(day) ∧ Year1970(day) → Tuesday(day)\nDecember1st(day) ∧ Year2021(day) → Wednesday(day)\nThursday(today)", "query": {"NL": "Is it true that Today is December 1.?", "FOL": "Is December1st(today) true?"}}
{"premises": "On December 1, 30 days remain until the end of the year in the Gregorian calendar.\nDecember 1, 1970, was a Tuesday.\nDecember 1, 2021, was a Wednesday.\nToday is Thursday.", "premises-FOL": "∀x (December1st(x) ∧ GeorgianCalendar(x) → ThirtyDaysRemainUntilTheEndOfTheYear(x))\nDecember1st(day) ∧ Year1970(day) → Tuesday(day)\nDecember1st(day) ∧ Year2021(day) → Wednesday(day)\nThursday(today)", "query": {"NL": "Is it true that If it is 30 days before the end of a year, then it is a Wednesday.?", "FOL": "Is ∀x (ThirtyDaysRemainUntilTheEndOfTheYear(x) → Wednesday(x)) true?"}}
{"premises": "A plane goes faster than a car.\nA car goes faster than walking.\nRiding bikes is faster than walking.", "premises-FOL": "∀x ∀y (Plane(x) ∧ Car(y) → Faster(x, y))\n∀x ∀y (Car(x) ∧ Walking(y) → Faster(x, y))\n∀x ∀y (RidingBike(x) ∧ Walking(y) → Faster(x, y))", "query": {"NL": "Is it true that A plane goes faster than riding a bike.?", "FOL": "Is ∀x ∀y (Plane(x) ∧ RidingBike(y) → Faster(x, y)) true?"}}
{"premises": "A plane goes faster than a car.\nA car goes faster than walking.\nRiding bikes is faster than walking.", "premises-FOL": "∀x ∀y (Plane(x) ∧ Car(y) → Faster(x, y))\n∀x ∀y (Car(x) ∧ Walking(y) → Faster(x, y))\n∀x ∀y (RidingBike(x) ∧ Walking(y) → Faster(x, y))", "query": {"NL": "Is it true that A plane goes faster than walking.?", "FOL": "Is ∀x ∀y (Plane(x) ∧ Walking(y) → Faster(x, y)) true?"}}
